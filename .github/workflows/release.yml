name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rust-ai-tool
            asset_name: rust-ai-tool-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rust-ai-tool.exe
            asset_name: rust-ai-tool-windows-amd64.exe
          - os: macOS-latest
            target: x86_64-apple-darwin
            artifact_name: rust-ai-tool
            asset_name: rust-ai-tool-macos-amd64

    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
      
      - name: Package
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          else
            tar -czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          fi
          cd -
      
      - name: Calculate checksums
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            sha256sum ${{ matrix.asset_name }}.zip > ${{ matrix.asset_name }}.zip.sha256
          else
            sha256sum ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256
          fi
      
      - name: Upload binaries to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ matrix.asset_name }}.*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-python-package:
    name: Build Python package
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build Python package
        run: |
          cd bindings
          python -m build
      
      - name: Upload Python package
        uses: softprops/action-gh-release@v1
        with:
          files: bindings/dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: bindings/dist/

  create-release-notes:
    name: Create Release Notes
    runs-on: ubuntu-latest
    needs: [build-and-release, build-python-package]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.0.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update release with changelog
        uses: softprops/action-gh-release@v1
        with:
          body: |
            ## Rust AI Tool ${{ github.ref_name }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ### Binary installation
            
            Download the appropriate binary for your platform and add it to your PATH.
            
            ### From source
            
            ```bash
            cargo install --git https://github.com/yourusername/rust-ai-tool.git
            ```
            
            ### Python package
            
            ```bash
            pip install rust-ai-tool
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}